//가능한 모든 LCS 리스트 구하기
#include <iostream>
#include <vector>
#include <set>
#include <algorithm>
using namespace std;

void BackTracking(
	int i, int j, int LCSval, 
	string& str1, string& LCSstr, 
	set<string>& retList, vector<vector<int>>& LCS) 
{
	if (LCS[i][j] == 0 && LCSstr.size() == LCSval) {
		string ans(LCSstr);
		reverse(begin(ans), end(ans));
		retList.insert(ans);
		return;
	}

	if (LCS[i][j] == LCS[i - 1][j]) 
		BackTracking(i - 1, j, LCSval, str1, LCSstr, retList, LCS);
	
	if (LCS[i][j] == LCS[i][j - 1]) 
		BackTracking(i, j - 1, LCSval, str1, LCSstr, retList, LCS);
	
	if (LCS[i][j] != LCS[i - 1][j] && LCS[i][j] != LCS[i][j - 1]) {
		LCSstr.push_back(str1[i]);
		BackTracking(i - 1, j - 1, LCSval, str1, LCSstr, retList, LCS);
		LCSstr.pop_back();
	}
}

vector<string> getLCSList(string str1, string str2) {
	int i = 1, j = 1;
	set<string> ret;
	vector<vector<int>> LCS(str1.size() + 1, vector<int>(str2.size() + 1, 0));

	str1 = " " + str1;
	str2 = " " + str2;

	for (i = 1; i < str1.size(); i++)
		for (j = 1; j < str2.size(); j++)
			if (str1[i] == str2[j])
				LCS[i][j] = LCS[i - 1][j - 1] + 1;
			else
				LCS[i][j] = max(LCS[i - 1][j], LCS[i][j - 1]);

	i--, j--;
	string LCSstring;
	int LCSval = LCS[i][j];
	if (LCSval != 0)
		BackTracking(i, j, LCSval, str1, LCSstring, ret, LCS);

	return vector<string>(begin(ret), end(ret));
}

int main() {
	string a, b;
	cin >> a >> b;
	vector<string> LCSList = getLCSList(a, b);

	cout << "List size: " << LCSList.size() << "\n";
	for (auto& e : LCSList) {
		cout << e << endl;
	}
}