//problem No. 1238, 파티
#include <iostream>
#include <vector>
#include <queue>
using namespace std;
typedef pair<int, int> pii;

const int MAX = 1001, INF = 2e9;

vector<pii> g[MAX];
int dist[MAX], visited[MAX];
int toX[MAX], toHome[MAX]; //X, X에서 집으로 가는데 걸리는 시간
int N, M, X;

//to가 0이면 목적지 X
void dijkstra(int from, int to) {
	fill(visited + 1, visited + MAX, 0);
	fill(dist + 1, dist + MAX, INF);
	dist[from] = 0;

	priority_queue<pii, vector<pii>, greater<pii>> pq;
	pq.push({ dist[from], from }); //거리, 정점

	while (!pq.empty()) {
		int curT = pq.top().first;
		int curV = pq.top().second;
		pq.pop();
		if (visited[curV])
			continue;

		visited[curV] = 1;
		for (int i = 0; i < g[curV].size(); i++) {
			int nextV = g[curV][i].first;
			int nextT = curT + g[curV][i].second;

			if (nextT < dist[nextV]) {
				dist[nextV] = nextT;
				pq.push({ nextT, nextV });
			}
		}

		if (curV == to)
			break;
	}
}

int main() {
	cin.tie(0);

	cin >> N >> M >> X;
	for (int i = 0; i < M; i++) {
		int v, u, d;
		cin >> v >> u >> d;
		g[v].push_back({ u, d });
	}

	dijkstra(X, 0);
	for (int i = 1; i <= N; i++)
		toHome[i] = dist[i];

	for (int i = 1; i <= N; i++)
		cout << toHome[i] << " ";
}