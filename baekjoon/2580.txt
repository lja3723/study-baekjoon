//problem No. 2580, 스도쿠
#include <iostream>
#include <vector>
using namespace std;

struct RC { int r, c; };
int map[9][9], check[10], i, j;
vector<RC> blank;
RC cur;
void clear() {
	fill(check, check + 10, 0);
}

bool rowCheck() {
	clear();
	for (j = 0; j < 9; j++) {
		int c = map[cur.r][j];
		if (!c)
			return true;
		if (++check[c] > 1) //중복 발견
			return false;
	}
	return true;
}

bool colCheck() {
	clear();
	for (i = 0; i < 9; i++) {
		int c = map[i][cur.c];
		if (!c)
			return true;
		if (++check[c] > 1)
			return false;
	}
	return true;
}

bool sqCheck() {
	clear();
	for (i = 0; i < 3; i++)
		for (j = 0; j < 3; j++) {
			int c = map[3 * (cur.r / 3) + i][3 * (cur.c / 3) + j];
			if (!c) 
				return true;
			if (++check[c] > 1)
				return false;
		}
	return true;
}

void bt(int filled) {
	if (blank.empty()) return;
	if (filled == blank.size()) {
		///**/cout << "\n";
		for (i = 0; i < 9; i++) {
			for (j = 0; j < 9; j++)
				cout << map[i][j] << " ";
			cout << "\n";
		}
		exit(0);
		//return;
	}

	for (int n = 1; n <= 9; n++) {
		cur = blank[filled];
		map[cur.r][cur.c] = n;
		if (rowCheck() && colCheck() && sqCheck()) {
			bt(filled + 1);
		}
		cur = blank[filled];
		map[cur.r][cur.c] = 0;
	}
}

int main() {
	for (i = 0; i < 9; i++) for (j = 0; j < 9; j++) {
		cin >> map[i][j];
		if (map[i][j] == 0)
			blank.push_back({ i, j });
	}

	bt(0);
}
