//problem No. 2580, 스도쿠
#include <iostream>
#include <vector>
using namespace std;

struct RC { int r, c; };
int map[9][9], i, j;
vector<RC> blank;

bool prCheck(RC cur) {
	int check[10];

	//ㅡ 체크
	fill(check, check + 10, 0);
	for (j = 0; j < 9; j++) {
		if (++check[map[cur.r][j]] > 1) //중복 발견
			return 0;
		else if (check[0] > 0) //빈 칸이므로 다음 조건 체크
			break;
	}

	//ㅣ 체크
	fill(check, check + 10, 0);
	for (i = 0; i < 9; i++) {
		if (++check[map[i][cur.c]] > 1)
			return 0;
		else if (check[0] > 0)
			break;
	}

	//ㅁ 체크
	fill(check, check + 10, 0);
	for (i = 0; i < 3; i++) 
		for (j = 0; j < 3; j++) {
			if (++check[map[3 * (cur.r / 3) + i][3 * (cur.c / 3) + j]] > 1)
				return 0;
			else if (check[0] > 0)
				break;
	}

	return 1;
}

void bt(int filled) {
	if (filled == blank.size()) {
		for (i = 0; i < 9; i++) {
			for (j = 0; j < 9; j++)
				cout << map[i][j] << " ";
			cout << "\n";
		}
		exit(0);
	}

	RC cur = blank[filled];
	for (int n = 1; n <= 9; n++) {
		map[cur.r][cur.c] = n;
		int goNext = 1;
		int check[10];

		if (prCheck(cur)) {
			bt(filled + 1);
		}
		map[cur.r][cur.c] = 0;
	}
}

int main() {
	for (i = 0; i < 9; i++) for (j = 0; j < 9; j++) {
		cin >> map[i][j];
		if (map[i][j] == 0)
			blank.push_back({ i, j });
	}

	bt(0);
}
